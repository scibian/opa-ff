#!/bin/bash
# BEGIN_ICS_COPYRIGHT8 ****************************************
#
# Copyright (c) 2015-2020, Intel Corporation
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Intel Corporation nor the names of its contributors
#       may be used to endorse or promote products derived from this software
#       without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# END_ICS_COPYRIGHT8   ****************************************

. $ICSBIN/funcs.sh

# Simple script to perform builds for current system/OS type
export PRODUCT=${PRODUCT:-OPENIB_FF}
export BUILD_TARGET=${BUILD_TARGET:-`uname -m`}

export BUILD_CONFIG=${BUILD_CONFIG:-"debug"}
export PRODUCT_DIRNAME=${PRODUCT_DIRNAME:-`basename ${PWD}`}

set -x
{
	echo "Environment:"
	env
	echo "----------------------------------------------------------------------------"
	echo
	# Klocwork scan
	if [ "$KW_ENABLE" = "yes" ]; then
		settl

		# Set Klocwork variables. set_klocwork defines all the Klocwork parameters
		# like server url, port number, Klocwork installationpath etc.,
		source $ICSBIN/set_klocwork -d

		# Check the retrun code of set_klocwork
		if [ $? -ne 0 ]; then
			echo "Something went wrong"
			echo "exiting.."
			exit 1
		fi

		# Capture the runmake compilation to kwinject.out using Klocwork's kwinject command
		$KW_INJECT ./runmake -B $BUILD_CONFIG $* || exit 1

		# Execute klocwork_analyze script to run integration analysis and upload
		# Klocwork tables to the server
		$ICSBIN/klocwork_analyze -p $PRODUCT >> $TL_DIR/$PRODUCT_DIRNAME/build.kw 2>&1
	else
		./runmake -B $BUILD_CONFIG $* || exit 1
	fi
} 2>&1|tee build.res

# Check Exit Status
exit_status=${PIPESTATUS[0]}
if [ $exit_status -ne 0 ] ; then
	echo "FAILED BUILD: A command exited with non-zero status: $exit_status" >> build.res
fi

set +x

# Check the results of the build for errors and unexpected warnings.
./check_results -r build.res build.err build.warn
