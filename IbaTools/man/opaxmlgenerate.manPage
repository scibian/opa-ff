.\" .\" *********************************************************************
.\" .\" *                                                                   *
.\" .\" *             Copyright 2015-2019, Intel Corporation                *
.\" .\" *                                                                   *
.\" .\" *                       All Rights Reserved.                        *
.\" .\" *                                                                   *
.\" .\" *********************************************************************

.TH opaxmlgenerate 8 "Intel Corporation" "Copyright(C) 2015\-2019" "IFSFFCLIRG (Man Page)" 
.SH NAME
opaxmlgenerate

.NL

.PP

\fB(Linux)\fR
Takes comma-separated-values (CSV) data as input and generates sequences of XML containing user-specified element names and element values within start and end tag specifications. Use this tool to create an XML representation of fabric data from its CSV form.
.SH Syntax
.NL
opaxmlgenerate [-v] [-d \fIdelimiter\fR] [-i \fInumber\fR] [-g \fIelement\fR]
.br
[-h \fIelement\fR] [-e \fIelement\fR] [-X \fIinput\(ulfile\fR] [-P \fIparam\(ulfile\fR]
.SH Options 
.NL

.TP 10
--help 
.NL
Produces full help text.

.TP 10
-g/--generate \fIelement\fR 
.NL
Generates value for \fIelement\fR using value in next field from the input file. Can be used multiple times on the command line. Values are assigned to elements in order.

.TP 10
-h/--header \fIelement\fR 
.NL
Name of the XML element that is the enclosing header start tag.

.TP 10
-e/--end \fIelement\fR 
.NL
Name of the XML element that is the enclosing header end tag.

.TP 10
-d/--delimit \fIdelimiter\fR 
.NL
Specifies the delimiter character that separates values in the input file. Default is semicolon.

.TP 10
-i/--indent \fInumber\fR 
.NL
Number of spaces to indent each level of XML output. Default is 0.

.TP 10
-X/--infile \fIinput\(ulfile\fR 
.NL
Generates XML from CSV in input\(ulfile. One record per line with fields in each record separated by the specified delimiter.

.TP 10
-P/--pfile \fIparam\(ulfile\fR 
.NL
Uses input command line options (parameters) from param\(ulfile.

.TP 10
-v/--verbose 
.NL
Produces verbose output. Includes output progress reports during extraction.

.NL

.SH Details
.NL

.PP
opaxmlgenerate takes the CSV data from an input file. It generates fragments of XML, and in combination with a script, can be used to generate complete XML sequences. opaxmlgenerate does not use nor require a connection to an Intel(R) Omni-Path Fabric.
.PP
opaxmlgenerate reads CSV element values and applies element (tag) names to those values. The element names are supplied as command line options to the tool and constitute a template that is applied to the input.
.PP
Element names on the command line are of three (3) types, distinguished by their command line option - Generate, Header, and Header\(ulEnd. The Header and Header\(ulEnd types together constitute enclosing element types. Enclosing elements do not contain a value, but serve to separate and organize Generate elements.
.PP
Generate elements, along with a value from the CSV input file, cause XML in the form of <element\(ulname> \fIvalue\fR</element\(ulname> to be generated. Generate elements are normally the majority of the XML output since they specify elements containing the input values. Header elements cause an XML header start tag of the form: <element\(ulname> to be generated. Header\(ulEnd elements cause an XML header end tag of the form </element\(ulname> to be generated. Output of enclosing elements is controlled entirely by the placement of those element types on the command line. opaxmlgenerate does
\fBnot\fR
check for matching start and end tags or proper nesting of tags.
.PP
Options (parameters) to opaxmlgenerate can be specified on the command line, with a parameter file, or both. A parameter file is specified with -P \fIparam\(ulfile\fR. When a parameter file specification is encountered on the command line, option processing on the command line is suspended, the parameter file is read and processed entirely, and then command line processing is resumed. Option syntax within a parameter file is the same as on the command line. Multiple parameter file specifications can be made, on the command line or within other parameter files. At each point that a parameter file is specified, current option processing is suspended while the parameter file is processed, then resumed. Options are processed in the order they are encountered on the command line or in parameter files. A parameter file can be up to 8192 bytes in size and may contain up to 512 parameters.
.NL

.SH Using opaxmlgenerate to Create Topology Input Files
.NL

.PP
opaxmlgenerate can be used to create scripts to translate from user-specific format into the opareport topology\(ulinput file format. opaxmlgenerate itself works against a CSV style file with one line per record. Given such a file it can produce hierarchical XML output of arbitrary complexity and depth.
.PP
The typical flow for a script which translates from a user-specific format into opareport topology\(ulinput would be:
.IP \(bu
As needed, reorganize the data into link and node data CSV files, in a sequencing similar to that used by opareport topology\(ulinput. One link record per line in one temporary file, one node record per line in another temporary file and one SM per line in a third temporary file.
.IP \(bu
The script must directly output the boilerplate for XML version, etc.
.IP \(bu
opaxmlgenerate can be used to output the Link section of the topology\(ulinput, using the link record temporary file.
.IP \(bu
opaxmlgenerate can be used to output the Node sections of the topology\(ulinput using the node record temporary file. If desired, there could be separate node record temporary files for HFIs and Switches.
.IP \(bu
opaxmlgenerate can be used to output the SM section of the topology\(ulinput, if desired.
.IP \(bu
The script must directly output the closing XML tags to complete the topology\(ulinput file.
